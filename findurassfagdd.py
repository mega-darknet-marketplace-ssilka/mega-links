
import os
import hashlib

def get_file_hash(filepath):
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à —Ñ–∞–π–ª–∞ (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)."""
    hash_sha256 = hashlib.sha256()
    try:
        with open(filepath, "rb") as f:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º ‚Äî —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø–∞–º—è—Ç—å
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
        return hash_sha256.hexdigest()
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filepath}: {e}")
        return None

def main():
    print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
    print("‚Äî" * 50)

    folder = input("üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ").strip()
    
    if not os.path.exists(folder):
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not os.path.isdir(folder):
        print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å ‚Äî –Ω–µ –ø–∞–ø–∫–∞.")
        return

    print("\nüîÑ –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...")

    hash_to_files = {}  # —Å–ª–æ–≤–∞—Ä—å: —Ö–µ—à ‚Üí —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
    total_files = 0

    for root, _, files in os.walk(folder):
        for file in files:
            filepath = os.path.join(root, file)
            if os.path.isfile(filepath):
                file_hash = get_file_hash(filepath)
                if file_hash:
                    hash_to_files.setdefault(file_hash, []).append(filepath)
                    total_files += 1

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ö–µ—à–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    duplicates = {h: paths for h, paths in hash_to_files.items() if len(paths) > 1}

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("‚Äî" * 50)
    if duplicates:
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        print("‚Äî" * 50)
        for group_id, (file_hash, paths) in enumerate(duplicates.items(), 1):
           
